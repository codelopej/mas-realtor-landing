---
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";

const navItems = [
	{ href: "/about", label: "About", ariaLabel: "About Apple Homes Corp." },
	{ href: "/services", label: "Services", ariaLabel: "Services" },
	{ href: "/contact", label: "Contact", ariaLabel: "Contact Us" },
];
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Apple Homes Corp.</title>
		<meta
			name="description"
			content="Apple Homes Corp. is a real estate company that specializes in helping you find your dream home."
		/>
	</head>
	<body
		class="bg-slate-900 text-ellipsis prose xl:prose-lg prose-invert max-w-none xl:max-w-screen-2xl font-mono"
	>
		<Header navItems={navItems} />
		<slot />
		<Footer navItems={navItems} />
	</body>
</html>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const elements = document.querySelectorAll(
			"[data-observe-left-in], [data-observe-right-in], [data-observe-up-in]",
		);

		const observerOptions: IntersectionObserverInit = {
			threshold: 0.01, // 1% of the element is visible
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					if (entry.target.hasAttribute("data-observe-left-in")) {
						entry.target.classList.add("opacity-100", "translate-x-0");
						entry.target.classList.remove("opacity-0", "-translate-x-10");
					} else if (entry.target.hasAttribute("data-observe-right-in")) {
						entry.target.classList.add("opacity-100", "translate-x-0");
						entry.target.classList.remove("opacity-0", "translate-x-10");
					} else if (entry.target.hasAttribute("data-observe-up-in")) {
						entry.target.classList.add("opacity-100", "translate-y-0");
						entry.target.classList.remove("opacity-0", "translate-y-20");
					}

					observer.unobserve(entry.target); // Stop observing the element
				}
			});
		}, observerOptions);

		elements.forEach((el) => observer.observe(el));
	});
</script>
